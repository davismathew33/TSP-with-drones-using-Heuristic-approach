#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <chrono> // Library for time measurement

using namespace std;
using namespace std::chrono;

// Struct to represent a point with x and y coordinates and weight
struct Point {
    int x, y;
    double weight; // Weight of goods
};

// Function to calculate distance between two points
double distance(Point a, Point b) {
    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

// Function to find the nearest neighbor tour for a set of points
vector<int> nearestNeighbor(int n, vector<Point>& points) {
    vector<int> tour;
    vector<bool> visited(n, false); // Keeps track of visited nodes

    int current = 0; // Start at the depot
    visited[current] = true;
    tour.push_back(current);

    // Loop to find nearest neighbor for each node
    for (int i = 0; i < n - 1; ++i) {
        double minDist = numeric_limits<double>::max();
        int nearest;

        // Find the nearest unvisited neighbor
        for (int j = 0; j < n; ++j) {
            if (!visited[j]) {
                double dist = distance(points[current], points[j]);
                if (dist < minDist) {
                    minDist = dist;
                    nearest = j;
                }
            }
        }

        visited[nearest] = true;
        tour.push_back(nearest);
        current = nearest;
    }

    return tour;
}

int main() {
    const int depotX = 2500;
    const int depotY = 2500;
    const int numCustomers = 20; // Number of customers

    // Sample input for customer nodes
    vector<Point> points = {
        {2795, 3838, 2.0}, {2927, 4660, 3.2}, {2266, 3742, 1.8}, {2454, 3267, 2.9}, {2047, 2954, 1.3},
        {2829, 3456, 3.8}, {2982, 4135, 2.6}, {3162, 3498, 4.5}, {2014, 3751, 2.2}, {2915, 4053, 3.1},
        {2350, 4284, 1.6}, {2751, 2896, 4.0}, {2478, 4167, 1.9}, {2132, 4087, 2.8}, {3155, 3851, 4.2},
        {2655, 3123, 2.4}, {2410, 4560, 3.3}, {2985, 3317, 1.7}, {2201, 3651, 4.1}, {2546, 3376, 2.0}
    };

    // Split customers based on weight
    vector<int> vehicleCustomers;
    vector<int> droneCustomers;
    for (int i = 0; i < numCustomers; ++i) {
        if (points[i].weight > 2.5) {
            vehicleCustomers.push_back(i);
        } else {
            droneCustomers.push_back(i);
        }
    }

    auto start = high_resolution_clock::now(); // Start time measurement

    // Run Nearest Neighbor algorithm to find the vehicle tour
    vector<int> vehicleTour = nearestNeighbor(vehicleCustomers.size(), points);

    // Run Nearest Neighbor algorithm to find the drone tour
    vector<int> droneTour = nearestNeighbor(droneCustomers.size(), points);

    auto end = high_resolution_clock::now(); // End time measurement
    auto duration = duration_cast<milliseconds>(end - start); // Calculate duration

    // Output the vehicle tour
    cout << "Vehicle Tour: ";
    for (int i = 0; i < vehicleTour.size(); ++i) {
        cout << vehicleCustomers[vehicleTour[i]] << " ";
    }
    cout << endl;

    // Output the drone tour
    cout << "Drone Tour: ";
    for (int i = 0; i < droneTour.size(); ++i) {
        cout << droneCustomers[droneTour[i]] << " ";
    }
    cout << endl;

    cout << "Execution time: " << duration.count() << " milliseconds" << endl; // Output execution time

    return 0;
}
